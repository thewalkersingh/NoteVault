Binary Tree
1. Binary Tree Right Side View
Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

public static List<Integer> rightSideView(TreeNode root) {
	  ArrayList<Integer> ans = new ArrayList<>();
	  rightSideHelper(root, ans, 0);
	  return ans;
   }
   
private static void rightSideHelper(TreeNode current, ArrayList<Integer> ans, int level) {
	  if(current == null)
		 return;
	  if(level == ans.size())
		 ans.add(current.val);
	  rightSideHelper(current.right, ans, level + 1);
	  rightSideHelper(current.left, ans, level + 1);
}


2. Count Good Nodes in Binary Tree 
Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.
 public static int goodNodes(TreeNode root) {
	if (root == null)
	  return 0;
	return dfs(root, root.val);
 }
  
 public static int dfs(TreeNode root, int max) {
	if (root == null)
	  return 0;
	max = Math.max(root.val, max);
	if (root.val >= max)
	  return 1 + dfs(root.left, max) + dfs(root.right, max);
	else
	  return dfs(root.left, max) + dfs(root.right, max);
  }

3. Maximum Depth of Binary Tree
Given the root of a binary tree, return its maximum depth.
A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 public static int maxDepth(TreeNode root) {
	if (root == null) {
	  return 0;
	}
	int left = maxDepth(root.left);
	int right = maxDepth(root.right);
	return Math.max(left, right) + 1;
 }


4. Leaf-Similar Trees
Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

 public static boolean leafSimilar(TreeNode root1, TreeNode root2) {
	ArrayList<Integer> leafNodes1 = new ArrayList<>();
	leafHelper(root1, leafNodes1);
	ArrayList<Integer> leafNodes2 = new ArrayList<>();
	leafHelper(root2, leafNodes2);
	return leafNodes1.equals(leafNodes2);
 }
  
 public static void leafHelper(TreeNode root, ArrayList<Integer> leafNodes) {
	if (root == null)
	  return;
	if (root.left == null && root.right == null)
	  leafNodes.add(root.val);
	leafHelper(root.left, leafNodes);
	leafHelper(root.right, leafNodes);
 }


5. Path Sum III
Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.
The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

public int count = 0;
public Map<Long, Integer> map = new HashMap<>();
public int pathSum(TreeNode root, int targetSum) {
    if (root == null)
        return 0;
    map.put(0L, 1);
    findPathSum(root, 0, targetSum);
    return count;
}
public void findPathSum(TreeNode root, long currentSum, int targetSum) {
    if (root == null)
        return;
    currentSum += root.val;
    if (map.containsKey(currentSum - targetSum))
        count += (int) map.get(currentSum - targetSum);
    map.put(currentSum, map.getOrDefault(currentSum, 0) + 1);
    findPathSum(root.left, currentSum, targetSum);
    findPathSum(root.right, currentSum, targetSum);
    map.put(currentSum, map.get(currentSum) - 1);
}


6. Longest ZigZag Path in a Binary Tree
You are given the root of a binary tree.
A ZigZag path for a binary tree is defined as follow:
Choose any node in the binary tree and a direction (right or left).
If the current direction is right, move to the right child of the current node; otherwise, move to the left child.
Change the direction from right to left or from left to right.
Repeat the second and third steps until you can't move in the tree.
Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).
Return the longest ZigZag path contained in that tree.

  public static int longestZigZag(TreeNode root) {
	if (root == null)
	  return 0;
	maxPathBetter(root, 0, 0);
	return maxPath;
  }
  
  public static void maxZigZag(TreeNode node, int steps, boolean goLeft) {
	if (node == null)
	  return;
	maxPath = Math.max(maxPath, steps);
	if (goLeft) {
	  maxZigZag(node.right, steps + 1, false);
	  maxZigZag(node.left, 1, true);
	}
	else {
	  maxZigZag(node.left, steps + 1, true);
	  maxZigZag(node.right, 1, false);
	}
  }
  
  public static void maxPathBetter(TreeNode node, int left, int right) {
	if (node == null)
	  return;
	maxPath = Math.max(maxPath, Math.max(left, right));
	maxPathBetter(node.left, right + 1, 0);
	maxPathBetter(node.right, 0, left + 1);
  }


7. Lowest Common Ancestor of a Binary Tree
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
	// base case if we have found any then return
	if (root == null || root == p || root == q) {
		return root;
	}
	TreeNode left = lowestCommonAncestor(root.left, p, q);
	TreeNode right = lowestCommonAncestor(root.right, p, q);
	// if it is not in left then return right
	if (left == null) {
		return right;
	} else if (right == null) {
		return left;
	} else {
		// if both are not null then we found the LCA
		return root;
	}
}


8. Maximum Level Sum of a Binary Tree
Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.
Return the smallest level x such that the sum of all the values of nodes at level x is maximal.

9. Nodes without sibling
For a given Binary Tree of type integer, print all the nodes without any siblings.
Example Input : 1 4 5 6 -1 -1 7 20 30 80 90 -1 -1 -1 -1 -1 -1 -1 -1
public static void printNodesWithoutSibling(BinaryTreeNode<Integer> root) {}

10. Minimum and Maximum in the BT
For a given a Binary Tree of type integer, find and return the minimum and the maximum data values.
Return the output as an object of Pair class, which is already created.
Note: All the node data will be unique and hence there will always exist a minimum and maximum node data.
public static Pair<Integer, Integer> getMinAndMax(BinaryTreeNode<Integer> root) {}

11. Path sum root to leaf
For a given Binary Tree of type integer and a number K, print out all root-to-leaf paths where the sum of all the node data along the path is equal to K.
public static void rootToLeafPathsSumToK(BinaryTreeNode<Integer> root, int k) {}

12. Print nodes at distance k from node
You are given a Binary Tree of type integer, a integer value of target node's data, and an integer value K.
Print the data of all nodes that have a distance K from the target node. The order in which they would be printed will not matter.
public static void nodesAtDistanceK(BinaryTreeNode<Integer> root, int node, int k) {}

13. BST to LL
Given a BST, convert it into a sorted linked list. You have to return the head of LL.
public static LinkedListNode<Integer> constructLinkedList(BinaryTreeNode<Integer> root) {}

14. LCA of BST
Given a binary search tree and data of two nodes, find 'LCA' (Lowest Common Ancestor) of the given two nodes in the BST.
LCA
LCA of two nodes A and B is the lowest or deepest node which has both A and B as its descendants. 
public static int getLCA(BinaryTreeNode<Integer> root, int a, int b) {}

15. Replace with sum of greater nodes
Given a binary search tree, you have to replace each node's data with the sum of all nodes which are greater or equal than it. You need to include the current node's data also.
That is, if in given BST there is a node with data 5, you need to replace it with sum of its data (i.e. 5) and all nodes whose data is greater than or equal to 5.
Note: You don't need to return or print, just change the data of each node.
public static void replaceWithLargerNodesSum(BinaryTreeNode<Integer> root) {}


16. Level wise linkedList in BST
Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.
public static ArrayList<LinkedListNode<Integer>> constructLinkedListForEachLevel(BinaryTreeNode<Integer> root){}

17. Largest BST
Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree. You have to return the height of largest BST.
Note : The binary tree will be consisting of only unique elements.
public static int largestBSTSubtree(BinaryTreeNode<Integer> root) {}

18. Pair sum in a BST
Given a binary search tree and an integer S, find pair of nodes in the BST which sum to S. You can use extra space of the order of O(log n).
Note:
1. Assume BST contains all unique elements.
2. In a pair, print the smaller element first.
public static void printNodesSumToS(BinaryTreeNode<Integer> root, int s) {}

